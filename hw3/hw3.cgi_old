#include<iostream>
#include"lib.h"
#include<vector>
#include<fstream>
using namespace std;
#define SA struct sockaddr
#define F_CONNECTING 0
#define F_READING 1
#define F_WRITING 2
#define F_DONE 3


class ClientInfo{
    public:
    string info[3];
    int cliFD;
    struct sockaddr_in seraddr;
    fstream fp;
    int can_write;
};


static int socket_init(struct sockaddr_in *seraddr,struct hostent *he, const char* port){
    int listenfd;
    bzero(seraddr,sizeof(&seraddr));
    seraddr->sin_family=AF_INET;
    seraddr->sin_addr= *((struct in_addr*)he->h_addr);
    seraddr->sin_port=htons(atoi(port));
    return listenfd;
}

int main(int argc, char **argv){

    char kk[100];
    ClientInfo cli_info[5];  // [][0] is ip, [][1] is port, [][2] is file name
    int listenfd,cliaddr_len,pid;
    struct sockaddr_in cliaddr;
    struct hostent *he;
    char read_buff[1024];

    /*INIT FD SET*/
    fd_set all_rfd, all_wfd;
    fd_set act_rfd, act_wfd;
    int conn = 0;
    int fd_size = 0;
    FD_ZERO(&all_rfd); 
    FD_ZERO(&all_wfd); 
    FD_ZERO(&act_rfd); 
    FD_ZERO(&act_wfd); 


    

    bzero(kk, sizeof(kk));
    strcpy(kk, getenv("QUERY_STRING"));   
//    strcpy(kk, "h1=&p1=&f1=&h2=192.168.55.55&p2=7007&f2=test1.txt&h3=&p3=&f3=&h4=&p4=&f4=&h5=&p5=&f5=");    
//    strcpy(kk, "h1=192.168.55.55&p1=9191&f1=test1.txt&h2=192.168.55.55&p2=9197&f2=test1.txt&h3=&p3=&f3=&h4=&p4=&f4=&h5=&p5=&f5= ");    
    string data; 
    data.assign(kk);
    

    for(int i=0; i<5; i++){                   
        for(int k=0; k<3; k++){
            string substr;
            int pos = data.find("&");
            substr = data.substr(0,pos);
            if(pos!=0){
                data.erase(0, pos+1);
            }
            int pos_equal = data.find("=");
            cli_info[i].info[k] = substr.substr(pos_equal+1);
        }
    }


    for(int i=0; i<5; i++){
        cli_info[i].cliFD = -1;
        if(cli_info[i].info[0].size()>0){
            int clientFD = socket(AF_INET,SOCK_STREAM,0);
//            printf("%d\n",clientFD);
//            printf("%s\n",cli_info[i].info[1].c_str());
            int flags = fcntl(clientFD, F_GETFL, 0);
            fcntl(clientFD, F_SETFL, flags | O_NONBLOCK);

            he = gethostbyname(cli_info[i].info[0].c_str());
            socket_init(&cli_info[i].seraddr, he, cli_info[i].info[1].c_str());    

            if(connect(clientFD, (SA*)&cli_info[i].seraddr,sizeof(cli_info[i].seraddr)) <0 ){
                if(errno != EINPROGRESS)return (-1);
            }
            cli_info[i].cliFD = clientFD;
            cli_info[i].can_write = 0;
            cli_info[i].fp.open(cli_info[i].info[2].c_str());
            FD_SET(clientFD, &all_rfd);
            FD_SET(clientFD, &all_wfd);
            conn++;
            fd_size = clientFD>fd_size?clientFD:fd_size;
        }
    }

    /*Output Html Header */
    cout<<"Content-type:text/html\n\n";
    cout<<"<html><head>"<<endl;
    cout<<"<meta http-equiv='Content-Type' content='text/html; charset=big5' />"<<endl;
    cout<<"<title>Network Programming Homework 3</title>"<<endl;
    cout<<"<body bgcolor=#336699><font face='Courier New' size=2 color=#FFFF99><table width='800' border='1'><tr>"<<endl;    
    for(int i=0; i<5; i++){
        if(cli_info[i].cliFD != -1){
            cout<<"<td>"<<cli_info[i].info[0]<<"</td>"<<endl;
        }
    }
    cout<<"</tr><tr>"<<endl;
    for(int i=0; i<5; i++){
        if(cli_info[i].cliFD != -1){
            cout<<"<td valign='top' id='m"<<i<<"'></td>"<<endl;
        }
    }
    fflush(NULL);
    cout<<"</tr></table>"<<endl;



    act_rfd = all_rfd;
    act_wfd = all_wfd;
    int write_complete = 0;


    int statusA = F_CONNECTING;
    while(conn > 0){
        memcpy(&act_rfd, &all_rfd, sizeof(all_rfd));
        memcpy(&act_wfd, &all_wfd, sizeof(all_wfd));

        select(fd_size+1, &act_rfd, &act_wfd, NULL, NULL);
/*        if( conn != write_complete ){
            if( select(fd_size+1, &act_rfd, &act_wfd, NULL, NULL) < 0 ) exit(0);
        }
        else{
            if( select(fd_size+1, &act_rfd, NULL, NULL, NULL) < 0 ) exit(0);            
        }*/

        //if(statusA == F_CONNECTING && )   //Connection Not Complete Yet
        int cliFD;
        for(int i=0; i<5; i++){            
            if((cliFD = cli_info[i].cliFD) == -1)
                continue;            
            if(FD_ISSET(cliFD, &act_rfd)){ //READ
//                cout<<i<<endl;
                bzero(read_buff, sizeof(read_buff));
                read(cliFD, read_buff, sizeof(read_buff));                
                int rflag = 0;                        
                for(int k=0; k<strlen(read_buff); k++){
                    if( read_buff[k]=='%' && k==0){
                        rflag=1;
                    }
                    else if( k!=0){
                        if( read_buff[k]=='%' && read_buff[k-1]==32 )rflag=1;
                    }
                    if(read_buff[k] == 13)read_buff[k]=' ';
                    if(read_buff[k] == '\n')read_buff[k]=' ';
                }
                if( rflag == 1){
                    cli_info[i].can_write = 1;
                    cout<<"<script>document.all['m"<<i<<"'].innerHTML += '<br>';</script>"<<endl;
//                    cout<<"<br/>";
                }

                if(strlen(read_buff) > 0){
//                    *(index(read_buff,13)) = '\n';
                    cout<<"<script>document.all['m"<<i<<"'].innerHTML += '"<<read_buff<<"';</script>"<<endl;
//                    cout<<read_buff<<endl;
                }
//                else if(strlen(read_buff) == 0){
//                   cli_info[i].cliFD = -1; 
//                   FD_CLR(cli_info[i].cliFD, &all_rfd);
//                   close(cliFD);
//                   cli_info[i].can_write = 0;
//                   conn--;
//                   cout<<i<<"!!!!! "<<conn<<endl;
//                }

            }

            if(FD_ISSET(cliFD, &act_wfd) && cli_info[i].can_write == 1){ //WRITE
               if(cli_info[i].fp){
                   string tmp_buff;        
                   tmp_buff.clear();           
                   getline(cli_info[i].fp, tmp_buff);
//                   cout<<tmp_buff<<endl;
//                   *(index(tmp_buff.c_str(),13)) = '\0';                                                       
                   write(cliFD, tmp_buff.c_str(), strlen(tmp_buff.c_str()));
                   tmp_buff[ tmp_buff.length()-1 ] = ' ';
                   cout<<"<script>document.all['m"<<i<<"'].innerHTML += '"<<tmp_buff<<"<br/>';</script>"<<endl;
                   if(!tmp_buff.find("exit")){
                       cli_info[i].fp.close();
                       FD_CLR(cli_info[i].cliFD, &all_wfd);
                       write_complete++;
                       cli_info[i].cliFD = -1; 
                       FD_CLR(cli_info[i].cliFD, &all_rfd);
                       close(cliFD);
                       cli_info[i].can_write = 0;
                       conn--;
//                       cout<<"!!!"<<conn<<endl;
                   }
               }
               cli_info[i].can_write = 0;
            }
        }
    }
    cout<<"</font></body></html>"<<endl;

    return 0;    
}
